MDN을 통해 canvas에 대해 배워보자.
https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D

위 사이트에서 어떤식으로 코드를 작성해야하는지 
예시 코드가 올려져있으니 참고하길.

context - 해당 요소에서 픽셀에 접근할 수 있는 방법.

굉장히 간단하게 context를 만들 수 있다.

const canvas = document.getElementById('my-house');
const ctx = canvas.getContext('2d');

2d뿐만 아니라 다양한 context가 있다.

그리고 이 context변수로 라인을 그리는 것이다.
(라인, 사각형, 속이 찬 사각형 등을 그릴 수 있다.)


canvas는 context를 갖고 있는 HTML의 요소.
우린 그 요소 안에서 픽셀들을 다루는 것.

strokeStyle - 색상이나 스타일을 라인에 사용할 수 있다.
fillStyle - 색상이나 스타일을 shape 안에 사용할 수 있다.

우리가 사용할 것은 strokeStyle
canvas를 사용하려는 사람이 검정색으로 시작하도록 설정.

lineWidth - Range로 선 굵기 조절할 것.


선 그리는 로직은 onMouseDown에 들어가야함.
그래서 onMouseUp 함수는 없어도 됨.

onMouseDown함수도 필요없고 startPainting함수를 쓰자

onMouseMove를 잘 다뤄야하는 이유는
여기에서 모든 마우스 움직임을 감지하고,
라인을 만들어야 하기 때문.

'Path' - 기본적인 선.
Path로 시작할 수 있고, 움직일 수도 있고
Path를 색으로 채울 수도 있고, 닫을 수도 있다.

클릭하지 않고 떠다니는 건 path를 만들겠다는 것.
시작점에서부터 끝낼 때까지 라인을 만들기 위해 클릭하기를 기다리는 것.


path를 만드는 건 기본적으로 선(line), 
선의 시작점을 만드는 것.

시작점은 마우스가 움직이는 곳이라면 어디든지 된다.
그러다가 클릭이 되면, 시작점부터 클릭한 곳까지 선을 만드는 것.

https://developer.mozilla.org/ko/docs/Web/HTML/Canvas/Tutorial/Drawing_shapes
moveTo(x, y)함수와 beginPath( ) 함수에 대한 설명 참고


function onMouseMove(event) {
  const x = event.offsetX;
  const y = event.offsetY;
  if (!painting) {
    ctx.beginPath();
    ctx.moveTo(x, y);
  } else {
    ctx.lineTo(x, y);
    ctx.stroke();
  }
}

위의 코드는 다시 말해,
마우스가 움직일 때 캔버스 위에서의 X, Y의 좌표값을 계속 받아오는데,
페인팅이 아닐때(즉, 클릭하지 않고 마우스를 움직일때) 에는
계속 Path를 시작할려고 하고 시작점을 결정하려고 하다가
페이팅이 시작될 때 (마우스가 막 클릭되었을때)
클릭되기 직전에 경로시작점, moveTo(x, y)의 x, y 좌표가 결정되고
클릭된 상태에서 움직이는 경로는 lineTo(x, y)의 x, y좌표에 대입되어
stroke( )함수에 의해 선이 그려진다.

간단하게 
beginPath( ) 경로를 시작한다.
moveTo(x, y) x, y 좌표에서  
lineTo(x, y) x, y 좌표까지
stroke( ) 선을 그린다.


lineTo(x, y) : 현재 sub-path의 마지막 점을 특정 좌표와 직선으로 연결한다.

stroke( ) : 현재의 stroke style로 현재의 sub-path에 획을 그음.

문제가 있어서 선이 그려지지 않는다.
다음시간에 해결해보자.
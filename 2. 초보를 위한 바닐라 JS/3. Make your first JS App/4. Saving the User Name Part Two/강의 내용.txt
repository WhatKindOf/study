앞서 만든 JS 코드

const form = document.querySelector(".js-form"),
  input = form.querySelector("input"),
  greeting = document.querySelector(".js-greetings");

const USER_LS = "currentUser",
  SHOWING_CN = "showing"; // LS는 Local Storage, CN은 Class Name

function paintGreeting(text) {
  form.classList.remove(SHOWING_CN);
  greeting.classList.add(SHOWING_CN);
  greeting.innerText = `Hello ${text}`;
}

function loadName() {
  const currentUser = localStorage.getItem(USER_LS);
  if (currentUser === null) {
    // nobody
  } else {
    paintGreeting(currentUser);
  }
}

function init() {
  loadName();
}

init();

에서 // nobody에 해당하는 부분은
user를 갖고 있지 않을 때 동작한다.

user를 갖고 있지 않기 때문에
이 때, 폼을 띄워주고 이름을 입력받도록 할 것이다.


<input>태그에서 이름을 입력하고 엔터를 누르면,
form을 제출(submit)한다는 걸 의미.
<form>태그에 <input>태그를 넣은 이유가 바로 이것때문.
사용자가 엔터를 눌렀을 때, 알아차리길 원해서.

form을 제출하게 되면, 이걸 다른곳으로 보내려고 한다.


그래서 이걸 이용해서 함수를 구현한다.

form.addEventListener에서 뭔가 form에 submit하기를 기다린다.
그래서 submit이 되면 함수를 호출한다.


※ 우리는 새로운 것을 해보고 싶다. - event의 preventDefault 라는 것.

보통 event가 발생하게 되면, 다른 모든 것들이 event에 반응하게 된다.
form을 제출하는 event가 발생하면, document까지 도달하게 되어서
그 document는 다른 곳으로 갈려고 할 것이다.

즉 프로그램 되어진 대로 다른 곳으로 가고 페이지를 새로고침한다.

이러한 event의 기본 동작(기본값)을 막고 싶다.

그래서 event.preventDefault( ); 로 기본동작을 막게 되면
원래는 <input>값에 작성된 값은 엔터를 누를 때 사라져야 되는데
안 사라지게 된다.

이제는 이 parameter의 현재 value가 필요하다.
const currentValue = input.value; 로 가져올 수 있다.

그리고 paintGreeting(currentValue) 동작시켜
html화면 상에 Hello + <input>태그에 입력된 값을 보여줄 수 있게 된다.

하지만 여기서 끝내면 안된다.
왜냐하면 local storage에 저장한 게 아니기 때문에
새로고침하면 값이 사라진다.

localStorage.setItem(USER_LS, text); 해서 local storage에 저장해주자.

(local storage는 URLs를 기초로 동작)
예를 들면 
현재 웹사이트는 Facebook이 거기에 넣은 local storage를 가져올 수 없다.
(해당 페이지에서 저장한 local storage는 해당 페이지에서만 접근가능하다)

